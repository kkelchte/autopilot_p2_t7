import pilot_data
import os
import tensorflow as tf
from os import listdir
from os.path import isfile,join
import numpy as np
from PIL import Image
#number of times data is used for training and given as input
max_num_epochs = 5
#file generated by create_image_list.py
image_label_list = 'imglist_generated_tmp_RGB_flow.txt'

### DEFINE CNN NETWORK

#def inference():

#def loss():

#def training():

### READ IN DATA 

    
def read_my_file_format(filename_and_label_tensor):
    """Consumes a single filename and label as a ' '-delimited string.

    Args:
        filename_and_label_tensor: A scalar string tensor.

    Returns:
        Two tensors: the decoded image, and the string label.
    """
    #get filename and label from the scalar string tensor
    filename, label = tf.decode_csv(filename_and_label_tensor, [[""], [""]], " ")
    #import pdb; pdb.set_trace()
    #us read_file to get a string representation of the image in filename
    file_contents = tf.read_file(filename)
    #get RGB values out of the content
    example = tf.image.decode_jpeg(file_contents)
    return example, label

#removing label, obtaining list containing /path/to/image_x
image_list_file = open(image_label_list, 'r')
i_l_list = image_list_file.readlines()
image_list = [line[:-1] for line in i_l_list]

#print image_list
#output imagefilenames to a queue for an input pipeline
input_queue = tf.train.string_input_producer(image_list, num_epochs=max_num_epochs, shuffle=True, name='read_input')                                                     
image, label = read_my_file_format(input_queue.dequeue())
    
init_op = tf.initialize_all_variables()
with tf.Session() as sess:
    sess.run(init_op)
    #sess.as_default()

    coord = tf.train.Coordinator()
    threads = tf.train.start_queue_runners(coord=coord)

    for i in range(15): #length of your filename list
        im, lbl = sess.run([image, label])
        #image = image.eval() #here is your image Tensor :) 
    
        print(im.shape)
        print lbl
        #import pdb; pdb.set_trace()
        Image.fromarray(np.asarray(im)).show()
    #Image._show(Image.fromarray(np.asarray(im)), title="MYIMAGE")

    coord.request_stop()
    coord.join(threads)
